// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadingList;

namespace ReadingList.Migrations
{
    [DbContext(typeof(ReadingContext))]
    [Migration("20220226180603_seeddataquestionmarks")]
    partial class seeddataquestionmarks
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReadingList.Models.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Frances",
                            LastName = "McDormand"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Dan Alexandru",
                            LastName = "Condrea"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Jason",
                            LastName = "Carrion"
                        });
                });

            modelBuilder.Entity("ReadingList.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Jason",
                            Gender = 0,
                            LastName = "Motts"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Louisa May",
                            Gender = 1,
                            LastName = "Alcott"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Frank",
                            Gender = 0,
                            LastName = "Herbert"
                        });
                });

            modelBuilder.Entity("ReadingList.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CountryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CountryId = 1,
                            Description = "In Jason Mott’s Hell of a Book, a Black author sets out on a cross-country publicity tour to promote his bestselling novel. That storyline drives Hell of a Book and is the scaffolding of something much larger and urgent: since Mott’s novel also tells the story of Soot, a young Black boy living in a rural town in the recent past, and The Kid, a possibly imaginary child who appears to the author on his tour. As these characters’ stories build and build and converge, they astonish.For while this heartbreaking and magical book entertains and is at once about family, love of parents and children, art and money, it’s also about the nation’s reckoning with a tragic police shooting playing over and over again on the news.And with what it can mean to be Black in America. Who has been killed? Who is The Kid ? Will the author finish his book tour, and what kind of world will he leave behind? Unforgettably told, with characters who burn into your mind and an electrifying plot ideal for book club discussion, Hell of a Book is the novel Mott has been writing in his head for the last ten years.And in its final twists it truly becomes its title.",
                            Language = 0,
                            Title = "Hell Of a Book",
                            Year = 2021
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CountryId = 1,
                            Description = "Little Women follows the close-knit sisters Meg, Jo, Beth, and Amy March as they grow from children into young women. Its author, Louisa May Alcott, loosely based the Marches on her own sisters, and Jo—a young writer who resists society’s expectations for her behavior and passions—on herself. Living with their mother in Massachusetts, adjusting to their poorer circumstances while their father serves in the Civil War, the March girls grapple with first love, tremendous loss, and the gaps between who they are and who they would like to be. Set in New England during a time of great national crisis, it is a classic coming-of-age story beloved by generations.",
                            Language = 0,
                            Title = "Little Women",
                            Year = 1868
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CountryId = 1,
                            Description = "Set on the desert planet Arrakis, Dune is the story of the boy Paul Atreides—who would become known as Muad’Dib—and of a great family’s ambition to bring to fruition humankind’s most ancient and unattainable dream. A stunning blend of adventure and mysticism, environmentalism and politics, Dune won the first Nebula Award, shared the Hugo Award, and formed the basis of what is undoubtedly the grandest epic in science fiction.",
                            Language = 0,
                            Title = "Dune",
                            Year = 1965
                        });
                });

            modelBuilder.Entity("ReadingList.Models.BookGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 1,
                            GenreId = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            GenreId = 3
                        },
                        new
                        {
                            Id = 5,
                            BookId = 3,
                            GenreId = 4
                        },
                        new
                        {
                            Id = 6,
                            BookId = 2,
                            GenreId = 5
                        });
                });

            modelBuilder.Entity("ReadingList.Models.BookLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Audiobook")
                        .HasColumnType("bit");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LocationId");

                    b.ToTable("BookLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Audiobook = true,
                            BookId = 1,
                            LocationId = 1,
                            URL = "https://clevnet.overdrive.com/clevnet-cpl/content/media/5904391"
                        },
                        new
                        {
                            Id = 2,
                            Audiobook = true,
                            BookId = 2,
                            LocationId = 1,
                            URL = "https://clevnet.overdrive.com/clevnet-cpl/content/media/117851"
                        },
                        new
                        {
                            Id = 3,
                            Audiobook = true,
                            BookId = 3,
                            LocationId = 1,
                            URL = "https://clevnet.overdrive.com/clevnet-cpl/content/media/2308988"
                        });
                });

            modelBuilder.Entity("ReadingList.Models.BookPrize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("PrizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("PrizeId");

                    b.ToTable("BookPrizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            PrizeId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            PrizeId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            PrizeId = 2
                        });
                });

            modelBuilder.Entity("ReadingList.Models.BookWishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("WishListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("WishListId");

                    b.ToTable("BookWishLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            WishListId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            WishListId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 2,
                            WishListId = 1
                        },
                        new
                        {
                            Id = 4,
                            BookId = 3,
                            WishListId = 1
                        },
                        new
                        {
                            Id = 5,
                            BookId = 3,
                            WishListId = 2
                        });
                });

            modelBuilder.Entity("ReadingList.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "United States of America"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Puerto Rico"
                        });
                });

            modelBuilder.Entity("ReadingList.Models.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Chloe",
                            Gender = 1,
                            LastName = "Zhao"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Alexander",
                            Gender = 0,
                            LastName = "Nanau"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Antonio",
                            Gender = 0,
                            LastName = "Santini"
                        });
                });

            modelBuilder.Entity("ReadingList.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Literature"
                        },
                        new
                        {
                            Id = 2,
                            Name = "African American Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Classic Literature"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 10,
                            Name = "News"
                        });
                });

            modelBuilder.Entity("ReadingList.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cleveland Public Library",
                            Name = "Clevnet",
                            URL = "https://cpl.org/"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Lakewood Public Library",
                            URL = "https://www.lakewoodpubliclibrary.org/"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Netflix",
                            URL = "https://www.netflix.com/browse"
                        });
                });

            modelBuilder.Entity("ReadingList.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Description = "A woman in her sixties, after losing everything in the Great Recession, embarks on a journey through the American West, living as a van-dwelling modern-day nomad.",
                            DirectorId = 1,
                            Language = 0,
                            Rating = 3,
                            Title = "Nomadland",
                            Type = 0,
                            Year = 2020
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Description = "Director Alexander Nanau follows a crack team of investigators at the Romanian newspaper Gazeta Sporturilor as they try to uncover a vast health-care fraud that enriched moguls and politicians and led to the deaths of innocent citizens.",
                            DirectorId = 2,
                            Language = 5,
                            Rating = 5,
                            Title = "Collective",
                            Type = 0,
                            Year = 2019
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            Description = "A documentary about the power of transformation told through the eyes of 9 trans-identifying individuals in Puerto Rico.",
                            DirectorId = 3,
                            Language = 3,
                            Rating = 5,
                            Title = "Mala Mala",
                            Type = 0,
                            Year = 2014
                        });
                });

            modelBuilder.Entity("ReadingList.Models.MovieActor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieActors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActorId = 1,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActorId = 2,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 3,
                            ActorId = 3,
                            MovieId = 3
                        });
                });

            modelBuilder.Entity("ReadingList.Models.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenreId = 6,
                            MovieId = 1
                        },
                        new
                        {
                            Id = 2,
                            GenreId = 7,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 3,
                            GenreId = 8,
                            MovieId = 2
                        },
                        new
                        {
                            Id = 4,
                            GenreId = 7,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 5,
                            GenreId = 9,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 6,
                            GenreId = 6,
                            MovieId = 3
                        },
                        new
                        {
                            Id = 7,
                            GenreId = 10,
                            MovieId = 3
                        });
                });

            modelBuilder.Entity("ReadingList.Models.MovieLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Cost")
                        .HasColumnType("int");

                    b.Property<int?>("Format")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<bool?>("SpanishAudio")
                        .HasColumnType("bit");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieLocations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 0,
                            Format = 0,
                            LocationId = 1,
                            MovieId = 3,
                            Price = 0.0,
                            SpanishAudio = true,
                            URL = "https://search.clevnet.org/client/en_US/cpl-main/search/results?qu=Mala+mala"
                        },
                        new
                        {
                            Id = 2,
                            Cost = 0,
                            Format = 3,
                            LocationId = 1,
                            MovieId = 1,
                            Price = 0.0,
                            SpanishAudio = false,
                            URL = "https://search.clevnet.org/client/en_US/cpl-main/search/results?qu=nomadland&te="
                        },
                        new
                        {
                            Id = 3,
                            Cost = 0,
                            Format = 0,
                            LocationId = 1,
                            MovieId = 2,
                            Price = 0.0,
                            SpanishAudio = false,
                            URL = "https://search.clevnet.org/client/en_US/cpl-main/search/results?qu=collective&te="
                        });
                });

            modelBuilder.Entity("ReadingList.Models.MoviePrize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PrizeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("PrizeId");

                    b.ToTable("MoviePrizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MovieId = 1,
                            PrizeId = 1
                        },
                        new
                        {
                            Id = 2,
                            MovieId = 2,
                            PrizeId = 2
                        },
                        new
                        {
                            Id = 3,
                            MovieId = 3,
                            PrizeId = 3
                        });
                });

            modelBuilder.Entity("ReadingList.Models.MovieWishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("WishListId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("WishListId");

                    b.ToTable("MovieWishLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MovieId = 1,
                            WishListId = 3
                        },
                        new
                        {
                            Id = 2,
                            MovieId = 2,
                            WishListId = 3
                        },
                        new
                        {
                            Id = 3,
                            MovieId = 3,
                            WishListId = 3
                        },
                        new
                        {
                            Id = 4,
                            MovieId = 3,
                            WishListId = 4
                        });
                });

            modelBuilder.Entity("ReadingList.Models.Prize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Prizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The National Book Awards were established in 1950 to celebrate the best writing in America. Since 1989, they have been overseen by the National Book Foundation, a nonprofit organization whose mission is to celebrate the best literature in America, expand its audience, and ensure that books have a prominent place in American culture. Although other categories have been recognized in the past, the Awards currently honors the best Fiction, Nonfiction, Poetry, Translated Literature, and Young People’s Literature published each year.",
                            Name = "National Book Award for Fiction",
                            URL = "https://www.nationalbook.org/national-book-awards/years/"
                        },
                        new
                        {
                            Id = 2,
                            Description = "THE GREAT AMERICAN READ was an eight-part PBS series that explored and celebrated the power of reading, told through the prism of America’s 100 best-loved novels (as chosen in a national survey)*.  It investigated how and why writers create their fictional worlds, how we as readers are affected by these stories, and what these 100 different books have to say about our diverse nation and our shared human experience.",
                            Name = "The Great America Read",
                            URL = "https://www.pbs.org/the-great-american-read/books/#/"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Academy Award For Best Picture",
                            URL = "https://awardsdatabase.oscars.org/"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "Academy Award Nominee For International Feature Film",
                            URL = "https://awardsdatabase.oscars.org/"
                        },
                        new
                        {
                            Id = 5,
                            Description = "CTFF celebrates the talents of established and emerging filmmakers of Caribbean and African heritage who practice their art across the Caribbean Diaspora worldwide.",
                            Name = "CaribbeanTales International Film Festival",
                            URL = "https://caribbeantalesfestival.com/"
                        });
                });

            modelBuilder.Entity("ReadingList.Models.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WishLists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Audiobooks I want to listen to.",
                            Title = "Audiobooks"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Audiobooks to listen to in the car with my kids",
                            Title = "Family Books For the Car"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Movies I want to watch",
                            Title = "Movies"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Spanish movies, videos, TV shows, etc.",
                            Title = "Spanish Movies"
                        });
                });

            modelBuilder.Entity("ReadingList.Models.Book", b =>
                {
                    b.HasOne("ReadingList.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId");

                    b.HasOne("ReadingList.Models.Country", "Country")
                        .WithMany("Books")
                        .HasForeignKey("CountryId");

                    b.Navigation("Author");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("ReadingList.Models.BookGenre", b =>
                {
                    b.HasOne("ReadingList.Models.Book", "Book")
                        .WithMany("Genres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingList.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("ReadingList.Models.BookLocation", b =>
                {
                    b.HasOne("ReadingList.Models.Book", "Book")
                        .WithMany("Locations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingList.Models.Location", "Location")
                        .WithMany("Books")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ReadingList.Models.BookPrize", b =>
                {
                    b.HasOne("ReadingList.Models.Book", "Book")
                        .WithMany("Prizes")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingList.Models.Prize", "Prize")
                        .WithMany("Books")
                        .HasForeignKey("PrizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("ReadingList.Models.BookWishList", b =>
                {
                    b.HasOne("ReadingList.Models.Book", "Book")
                        .WithMany("WishLists")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingList.Models.WishList", "WishList")
                        .WithMany("Books")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("ReadingList.Models.Movie", b =>
                {
                    b.HasOne("ReadingList.Models.Country", "Country")
                        .WithMany("Movies")
                        .HasForeignKey("CountryId");

                    b.HasOne("ReadingList.Models.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId");

                    b.Navigation("Country");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("ReadingList.Models.MovieActor", b =>
                {
                    b.HasOne("ReadingList.Models.Actor", "Actor")
                        .WithMany("Movies")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingList.Models.Movie", "Movie")
                        .WithMany("Actors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ReadingList.Models.MovieGenre", b =>
                {
                    b.HasOne("ReadingList.Models.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingList.Models.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ReadingList.Models.MovieLocation", b =>
                {
                    b.HasOne("ReadingList.Models.Location", "Location")
                        .WithMany("Movies")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingList.Models.Movie", "Movie")
                        .WithMany("Locations")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("ReadingList.Models.MoviePrize", b =>
                {
                    b.HasOne("ReadingList.Models.Movie", "Movie")
                        .WithMany("Prizes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingList.Models.Prize", "Prize")
                        .WithMany("Movies")
                        .HasForeignKey("PrizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("ReadingList.Models.MovieWishList", b =>
                {
                    b.HasOne("ReadingList.Models.Movie", "Movie")
                        .WithMany("WishLists")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadingList.Models.WishList", "WishList")
                        .WithMany("Movies")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("ReadingList.Models.Actor", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("ReadingList.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ReadingList.Models.Book", b =>
                {
                    b.Navigation("Genres");

                    b.Navigation("Locations");

                    b.Navigation("Prizes");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("ReadingList.Models.Country", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("ReadingList.Models.Director", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("ReadingList.Models.Genre", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("ReadingList.Models.Location", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("ReadingList.Models.Movie", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Genres");

                    b.Navigation("Locations");

                    b.Navigation("Prizes");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("ReadingList.Models.Prize", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("ReadingList.Models.WishList", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
